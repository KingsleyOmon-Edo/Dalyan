//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dalyan.Service.Services
{
    using System;
    using SimpleInjector;
    using Dalyan.Domain;
    using Entities.Contracts;
    using System.Linq;
    using System.Text;
    using Dalyan.Entities.Interfaces;
    using Dalyan.Domain.Query;
    using System.Data;
    using System.Xml;
    using Dalyan.Entities.Models;
    using Dalyan.Entities.Enumerations;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    
    public class CommonUserTypeService
    {
    	private readonly Container _container;
    	public CommonUserTypeService(Container container)
    	{
    		_container = container;
    	}
    
    	    
    	public ServiceResult<CommonUserType> Add(CommonUserType obj)
    	{
    		try
    		{
    			IMediator service = _container.GetInstance<IMediator>();
    			IUserContext currentUser = _container.GetInstance<IUserContext>();
    			obj.IsDeleted = false;
    			var query = new CommonUserTypeAddQuery();
    			query.CommonUserType = obj;
    			return new ServiceResult<CommonUserType>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
    		}
    		catch(ExceptionLog ex)
    		{
    			LoggerService.Logger.Log(_container, ex);
    			return new ServiceResult<CommonUserType>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
    		}
    	}
    	public ServiceResult<CommonUserType> Edit(CommonUserType obj)
    	{
    		try
    		{
    			IMediator service = _container.GetInstance<IMediator>();
    			IUserContext currentUser = _container.GetInstance<IUserContext>();
    			var query = new CommonUserTypeEditQuery();
    			query.CommonUserType = obj;
    			return new ServiceResult<CommonUserType>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
    		}
    		catch(ExceptionLog ex)
    		{
    			LoggerService.Logger.Log(_container, ex);
    			return new ServiceResult<CommonUserType>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
    		}
    	}
    	public ServiceResult<CommonUserType> Retrieve(int Id)
    	{
    		try
    		{
    			IMediator service = _container.GetInstance<IMediator>();
    			var query = new CommonUserTypeRetrieveQuery{ Id = Id };
    			return new ServiceResult<CommonUserType>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
    		}
    		catch(ExceptionLog ex)
    		{
    			LoggerService.Logger.Log(_container, ex);
    			return new ServiceResult<CommonUserType>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
    		}
    	}
    	public ServiceResult<IList<CommonUserType>> GetAll()
    	{
    		try
    		{
    			IMediator service = _container.GetInstance<IMediator>();
    			var query = new CommonUserTypeGetAllQuery();
    			return new ServiceResult<IList<CommonUserType>>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
    		}
    		catch(ExceptionLog ex)
    		{
    			LoggerService.Logger.Log(_container, ex);
    			return new ServiceResult<IList<CommonUserType>>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
    		}
    	}
    	public ServiceResult<string> Delete(int Id)
    	{
    		try
    		{
    			IMediator service = _container.GetInstance<IMediator>();
    			var query = new CommonUserTypeDeleteQuery{ Id = Id };
    			return new ServiceResult<string>(service.Proccess(query).ToString(), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
    		}
    		catch(ExceptionLog ex)
    		{
    			LoggerService.Logger.Log(_container, ex);
    			return new ServiceResult<string>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
    		}
    	}
    }
}
