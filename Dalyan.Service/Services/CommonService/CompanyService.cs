//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dalyan.Service.Services
{
    using System;
    using SimpleInjector;
    using Dalyan.Domain;
    using System.Linq;
    using System.Text;
    using Dalyan.Domain.Query;
    using System.Data;
    using System.Xml;
    using Dalyan.Entities.Models;
    using Dalyan.Entities.Enumerations;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using Entities.Contracts;

    public class CompanyService
    {
        private readonly Container _container;
        public CompanyService(Container container)
        {
            _container = container;
        }


        public ServiceResult<Company> Add(Company obj)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new CompanyAddQuery();
                query.Company = obj;
                return new ServiceResult<Company>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Company>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }

        public ServiceResult<Company> Edit(Company obj)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new CompanyEditQuery();
                query.Company = obj;
                return new ServiceResult<Company>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Company>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<Company> Retrieve(int Id)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new CompanyRetrieveQuery { Id = Id };
                return new ServiceResult<Company>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Company>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<IList<Company>> GetAll()
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new CompanyGetAllQuery();
                return new ServiceResult<IList<Company>>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<IList<Company>>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<string> Delete(int Id)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new CompanyDeleteQuery { Id = Id };
                return new ServiceResult<string>(service.Proccess(query).ToString(), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<string>(result: "false", message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
    }
}
